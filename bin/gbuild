#!/bin/bash
#
# /Users/rbe/project/grooutils/bin/gbuild
# 
# Copyright (C) 2010 Informationssysteme Ralf Bensmann.
# Alle Rechte vorbehalten. Nutzungslizenz siehe http://www.bensmann.com/license_de.html
# All Rights Reserved. Use is subject to license terms, see http://www.bensmann.com/license_en.html
# 
# Created by: rbe
#

# Determine script directory
case $0 in
	./*) SCRIPT_DIR=${PWD} ;;
	/*) SCRIPT_DIR=${0%/*} ;;
	*/*) SCRIPT_DIR=${PWD}/${0%/*} ;;
	*) SCRIPT_DIR=${PWD} ;;
esac
# Set basic variables
pushd ${SCRIPT_DIR}/.. 2>/dev/null 1>&2
BASE=${2:-$(pwd)}
APPNAME=$(basename ${BASE})
popd 2>/dev/null 1>&2
BIN=${BASE}/bin
CONF=${BASE}/conf
SRC=${BASE}/src
LIB=${BASE}/lib
CLASSES=${BASE}/classes
DIST=${BASE}/dist

#
# Create needed directories.
#
_create_dirs() {
	echo "Creating directories in ${BASE}"
	mkdir -p ${BIN} ${CONF} ${SRC} ${LIB} ${CLASSES} ${DIST}
}

#
# Init Git distributed version control system.
#
_init_git() {
	echo "Initializing Git for ${BASE}"
	cd ${BASE}
	git init
}

#
# Make classpath.
#
_make_cp() {
	# Copy Groovy embedded to lib
	cp ${GROOVY_HOME}/embeddable/groovy-all-*.jar ${LIB}
	# Create classpath
	for lib in ${LIB}/*.jar
	do
		CP="${CP}:${lib}"
	done
	# Skip first colon
	echo ${CP} | cut -c 2-
}

#
# Cleanup working directories.
#
_clean() {
	echo "Cleaning up..."
	_create_dirs
	rm -rf ${CLASSES}/*
	rm -rf ${DIST}/*
}

#
# Compile classes: Java and Groovy.
#
_compile() {
	echo "Compiling classes..."
	cd $SRC
	# Classpath
	cp=$(_make_cp)
	echo "Classpath: ${cp}"
	# Java
	find . -type f -name \*.java -print0 | xargs -0 javac -d ${CLASSES} -cp "${cp}"
	# Groovy
	find . -type f -name \*.groovy -print0 | xargs -0 groovyc -d ${CLASSES} -cp "$CLASSES:${cp}"
	# Resources folder?
	if [ -d resources ]; then
		cp -R resources/* ../classes
	fi
}

#
# Create a JAR.
#
_jar() {
	# First compile
	_compile
	# Create jar
	j=${DIST}/${APPNAME}.jar
	echo "Creating JAR in ${j}"
	rm ${j}
	cd ${CLASSES}
	jar cf ${j} *
}

#
# Make a distribution.
#
_dist() {
	_clean && _jar
	if [ $? -eq 0 ]; then
		d=${BASE}/${APPNAME}.zip
		echo "Creating distribution in ${d}"
		# Temporary directory
		t=t$$/${APPNAME}
		mkdir -p $t
		cd $t
		# Copy libs and conf
		mkdir lib && cp -R ${LIB}/*.jar lib && cp -R ${DIST}/*.jar lib
		mkdir conf && cp ${CONF}/* conf
		# Copy runme
		cp ${BIN}/runme* .
		cd ..
		# Make ZIP archive
		zip -rm ${d} ${APPNAME}
		cd ..
		# Delete temporary directory
		rm -rf $t
	fi
}

# Check command line parameter
case "$1" in
	setup)
		_create_dirs
		_init_git
	;;
	clean)
		_clean
	;;
	compile)
		_compile
	;;
	jar)
		_jar
	;;
	dist)
		_dist
	;;
	run)
		$0 jar
		cp="$(_make_cp lib)"
		echo "Classpath: ${cp}"
		# TODO
		java -cp ${cp} Main
	;;
	*)
		echo "usage: $0 { setup | clean | compile | jar | dist | run } $2"
	;;
esac

exit 0
